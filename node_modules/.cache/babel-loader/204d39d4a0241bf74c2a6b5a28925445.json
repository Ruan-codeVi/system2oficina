{"ast":null,"code":"var _jsxFileName = \"/home/juan/Documentos/Front-End_Projetos-React.js/oficina/src/contexts/auth.js\",\n    _s = $RefreshSig$();\n\n// Criando o contexto para espalhar entre os components\nimport { useState, useEffect, createContext } from 'react';\nimport firebase from '../services/firebaseConnection';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext({});\n\nfunction AutthProvider({\n  children\n}) {\n  _s();\n\n  const [user, setUser] = useState(null);\n  const [loadingAuth, setLoadingAuth] = useState(false);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    function carragarStorage() {\n      const storageUser = localStorage.getItem('SistemaUser');\n\n      if (storageUser) {\n        setUser(JSON.parse(storageUser));\n        setLoading(false);\n      }\n\n      setLoading(false);\n    }\n\n    carragarStorage();\n  }, []); // Cadastrando um novo usuario no firebase\n\n  async function cadastroFirebase(email, password, nome) {\n    setLoadingAuth(true); //mudou para true, pq novo usuario esta sendo criado\n\n    await firebase.auth().createUserWithEmailAndPassword(email, password) // é uma promisse\n    .then(async value => {\n      // Caso de sucesso, recebendo o valor da promisse, para relacionar no banco de dados\n      //acessando a prop do user uid, e armazenando na variavel\n      let uid = value.user.uid; // Criando uma coleção no banco de dados\n\n      await firebase.firestore().collection('users') // relacionado a resposta da promisse anterior no doc e enviando um obj \n      .doc(uid).set({\n        nome: nome,\n        avatarUrl: null\n      }) // Depois de criar usuario, cadastrar no banco no dado,\n      .then(() => {\n        let data = {\n          uid: uid,\n          nome: nome,\n          email: value.user.email,\n          avatarUrl: null\n        };\n        setUser(data); // Repassa para o estado de user, que tem seu context espalhado\n\n        storageUser(data);\n        setLoadingAuth(false);\n      });\n    }).catch(error => {\n      console.log(error);\n      setLoadingAuth(false);\n    });\n  } // Função para salvar o localStore\n\n\n  function storageUser(data) {\n    localStorage.setItem('SistemaUser', JSON.stringify(data));\n  } // Desloga do Firebase\n\n\n  async function sair() {\n    await firebase.auth().signOut();\n    localStorage.removeItem('SistemaUser'); //limpando o local Storage\n\n    setUser(null); //voltando o estado pra null de novo\n  }\n\n  return (\n    /*#__PURE__*/\n    // Carrega as informações desses values e espalha pelos componente\n    _jsxDEV(AuthContext.Provider, {\n      value: {\n        signed: !!user,\n        user,\n        loading,\n        cadastroFirebase,\n        sair\n      },\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }, this)\n  );\n}\n\n_s(AutthProvider, \"cfSgbtrX0hZURct7wRZEaA58SUs=\");\n\n_c = AutthProvider;\nexport default AutthProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"AutthProvider\");","map":{"version":3,"sources":["/home/juan/Documentos/Front-End_Projetos-React.js/oficina/src/contexts/auth.js"],"names":["useState","useEffect","createContext","firebase","AuthContext","AutthProvider","children","user","setUser","loadingAuth","setLoadingAuth","loading","setLoading","carragarStorage","storageUser","localStorage","getItem","JSON","parse","cadastroFirebase","email","password","nome","auth","createUserWithEmailAndPassword","then","value","uid","firestore","collection","doc","set","avatarUrl","data","catch","error","console","log","setItem","stringify","sair","signOut","removeItem","signed"],"mappings":"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","sourcesContent":["// Criando o contexto para espalhar entre os components\nimport {useState,useEffect ,createContext } from 'react'\nimport firebase from '../services/firebaseConnection'\n\nexport const AuthContext = createContext( {} )\n\nfunction AutthProvider( { children } ) {\n    const [user, setUser] = useState( null )\n    const [loadingAuth, setLoadingAuth] = useState( false )\n    const [loading, setLoading] = useState(true)\n    \n    useEffect( () => {\n\n        function carragarStorage() {\n            const storageUser = localStorage.getItem( 'SistemaUser' )\n        \n            if ( storageUser ) {\n                setUser( JSON.parse( storageUser ) )\n                setLoading(false)\n            }\n            setLoading(false)\n        }\n        carragarStorage();\n\n    }, [] )\n    \n    // Cadastrando um novo usuario no firebase\n    \n    async function cadastroFirebase( email,password,nome ) {\n        setLoadingAuth( true ) //mudou para true, pq novo usuario esta sendo criado\n        await firebase.auth().createUserWithEmailAndPassword( email, password ) // é uma promisse\n        .then( async ( value ) => { // Caso de sucesso, recebendo o valor da promisse, para relacionar no banco de dados\n            //acessando a prop do user uid, e armazenando na variavel\n            let uid = value.user.uid\n            // Criando uma coleção no banco de dados\n            await firebase.firestore().collection( 'users' )\n            // relacionado a resposta da promisse anterior no doc e enviando um obj \n            .doc( uid ).set( {\n                nome: nome,\n                avatarUrl: null,\n            } )\n            // Depois de criar usuario, cadastrar no banco no dado,\n             .then( () => {\n                 \n                 let data = {\n                     uid: uid,\n                     nome: nome,\n                     email: value.user.email,\n                     avatarUrl:null\n                 }\n                 setUser( data ) // Repassa para o estado de user, que tem seu context espalhado\n                 storageUser( data )\n                 setLoadingAuth(false) \n            })\n        } )\n        .catch( (error) => {\n            console.log( error );\n            setLoadingAuth(false) \n        })\n    }\n\n\n    // Função para salvar o localStore\n    function storageUser(data) {\n        localStorage.setItem('SistemaUser', JSON.stringify(data))\n    }\n\n    // Desloga do Firebase\n    async function sair() {\n        await firebase.auth().signOut()\n        localStorage.removeItem( 'SistemaUser' ) //limpando o local Storage\n        setUser(null) //voltando o estado pra null de novo\n\n    }\n\n    return (\n        // Carrega as informações desses values e espalha pelos componente\n        <AuthContext.Provider\n            value={{\n                signed: !!user,\n                user,\n                loading,\n                cadastroFirebase,\n                sair\n            }}>\n            \n            {children}\n        </AuthContext.Provider>\n    )\n}\nexport default AutthProvider\n\n"]},"metadata":{},"sourceType":"module"}
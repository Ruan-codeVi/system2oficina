{"ast":null,"code":"var _jsxFileName = \"/home/juan/Documentos/Front-End_Projetos-React.js/oficina/src/contexts/auth.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect, createContext } from 'react';\nimport firebase from '../services/firebaseConnection';\nimport { toast } from 'react-toastify'; // Criando um contexto para espalha informações para outros components\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext({});\n\nfunction AuthProvider({\n  children\n}) {\n  _s();\n\n  const [user, setUser] = useState(null); // começa pq não existe usuario\n\n  const [loadingAuth, setAuthLoading] = useState(false); // loading do login\n\n  const [loading, setLoading] = useState(true); //loading geral, quando abre a aplicação\n  //Montando a aplicação com usuario do local storage caso haja um\n\n  useEffect(() => {\n    // Procura no local Storage\n    function loadingStorage() {\n      const storageUser = localStorage.getItem('Sistema_User'); // vendo se há alguns usuario no localStorage\n\n      if (storageUser) {\n        setUser(JSON.parse(storageUser)); // se tiver algo, mandar para o estado setUser\n\n        setLoading(false);\n      }\n\n      setLoading(false);\n    }\n\n    loadingStorage();\n  }, []); // cadastrando novo usuario no Firebase\n\n  async function casdastrarFireBase(email, password, nome) {\n    setAuthLoading(true); // mudou pra true, pq tem alguem querendo cadastrar\n\n    await firebase.auth().createUserWithEmailAndPassword(email, password).then(async value => {\n      // caso de sucesso, recebe value com informações do usuario cadastrado\n      // transformando a função em assincrona para poder relacionar com o banco de dados do firebase\n      let uid = value.user.uid; // Indo no banco cadastrar\n\n      await firebase.firestore().collection('users').doc(uid) // falando criar um doc com a variavel que recebe o uid\n      .set({\n        // o que vai ser enviado para a coleção\n        nome: nome,\n        avatarUrl: null\n      })\n      /*Depois de cadastrar usuario, cadastrou no banco esse usuario,\n       agora é disponibilizar esse dados para estado de user    \n      */\n      .then(() => {\n        let data = {\n          uid: uid,\n          nome: nome,\n          email: value.user.email,\n          avatarUrl: null\n        }; // Passando para estado user atraves de setUser\n\n        setUser(data);\n        saveStorageUser(data);\n        setAuthLoading(false); // cadastro finalizado\n\n        toast.success('Cadastrado com sucesso');\n      });\n    }).catch(erro => {\n      console.log(erro);\n      toast.error('Erro ao cadastrar, Tente mais tarde');\n      setAuthLoading(false);\n    });\n  } // Salvar no localStorage esse usuario novo\n\n\n  function saveStorageUser(data) {\n    localStorage.setItem('Sistema_User', JSON.stringify(data));\n  } // Login de usuario\n\n\n  async function logar(email, password) {\n    setAuthLoading(true); // Indo no firebase buscar email e senha\n\n    await firebase.auth().signInWithEmailAndPassword(email, password).then(async value => {\n      // recebendo a response da promisse, pegando uid\n      let uid = value.user.uid;\n      const userProflie = await firebase.firestore().collection('users').doc(uid).get(); // utilizando valor da reposta do firebase armazenando em userProfile\n\n      let data = {\n        uid: uid,\n        nome: userProflie.data().nome,\n        avatarUrl: userProflie.data().avatarUrl,\n        email: value.user.email\n      }; // Passando para estado user atraves de setUser\n\n      setUser(data);\n      saveStorageUser(data);\n      setAuthLoading(false); // cadastro finalizado\n\n      toast.success('Bem vindo ao sistema');\n    }).catch(erro => {\n      console.log(erro);\n      toast.error('Ops!, algo errado');\n      setAuthLoading(false);\n    });\n  } // Deslogando do sistema\n\n\n  async function deslogarFirebase() {\n    await firebase.auth().signOut();\n    localStorage.removeItem('Sistema_User');\n    setUser(null);\n  }\n\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      logado: !!user,\n      user,\n      loading,\n      casdastrarFireBase,\n      deslogarFirebase,\n      logar,\n      loadingAuth\n    },\n    children: [\"                         \", children]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 122,\n    columnNumber: 9\n  }, this);\n}\n\n_s(AuthProvider, \"nAzZ5yLdCK2UQ7434zul/s7KcG4=\");\n\n_c = AuthProvider;\nexport default AuthProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"sources":["/home/juan/Documentos/Front-End_Projetos-React.js/oficina/src/contexts/auth.js"],"names":["useState","useEffect","createContext","firebase","toast","AuthContext","AuthProvider","children","user","setUser","loadingAuth","setAuthLoading","loading","setLoading","loadingStorage","storageUser","localStorage","getItem","JSON","parse","casdastrarFireBase","email","password","nome","auth","createUserWithEmailAndPassword","then","value","uid","firestore","collection","doc","set","avatarUrl","data","saveStorageUser","success","catch","erro","console","log","error","setItem","stringify","logar","signInWithEmailAndPassword","userProflie","get","deslogarFirebase","signOut","removeItem","logado"],"mappings":"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","sourcesContent":["import { useState, useEffect, createContext } from 'react'\nimport firebase from '../services/firebaseConnection'\nimport {toast} from 'react-toastify'\n\n// Criando um contexto para espalha informações para outros components\n\nexport const AuthContext = createContext({})\n\nfunction AuthProvider( { children } ) {\n    const [user, setUser] = useState(null) // começa pq não existe usuario\n    const [loadingAuth, setAuthLoading] = useState( false ) // loading do login\n    const [loading, setLoading] = useState(true) //loading geral, quando abre a aplicação\n    \n    //Montando a aplicação com usuario do local storage caso haja um\n    useEffect( () => {\n        // Procura no local Storage\n        function loadingStorage() {\n            const storageUser = localStorage.getItem( 'Sistema_User' ) \n        \n            // vendo se há alguns usuario no localStorage\n            if ( storageUser ) {\n                setUser( JSON.parse( storageUser ) ) // se tiver algo, mandar para o estado setUser\n                setLoading(false)\n            }\n            setLoading(false)\n        }\n\n       loadingStorage()\n\n    }, [] )\n    \n    // cadastrando novo usuario no Firebase\n    async function casdastrarFireBase(email, password, nome) {\n        setAuthLoading( true ) // mudou pra true, pq tem alguem querendo cadastrar\n        \n        await firebase.auth().createUserWithEmailAndPassword( email, password)\n        .then(async ( value ) => { // caso de sucesso, recebe value com informações do usuario cadastrado\n           // transformando a função em assincrona para poder relacionar com o banco de dados do firebase\n            let uid = value.user.uid\n\n            // Indo no banco cadastrar\n            await firebase.firestore().collection( 'users' )\n            .doc( uid ) // falando criar um doc com a variavel que recebe o uid\n            .set( { // o que vai ser enviado para a coleção\n                nome: nome,\n                avatarUrl: null\n            } )\n            /*Depois de cadastrar usuario, cadastrou no banco esse usuario,\n             agora é disponibilizar esse dados para estado de user    \n            */\n            .then( () => {\n                let data = {\n                    uid: uid,\n                    nome: nome,\n                    email: value.user.email,\n                    avatarUrl: null   \n                }\n                 // Passando para estado user atraves de setUser\n                setUser( data )\n                saveStorageUser( data )\n                setAuthLoading( false ) // cadastro finalizado\n                toast.success('Cadastrado com sucesso')\n            } )\n\n        } )\n            .catch( erro => {\n                console.log( erro )\n                toast.error('Erro ao cadastrar, Tente mais tarde')\n                setAuthLoading( false )\n                \n            } )\n    }\n\n    // Salvar no localStorage esse usuario novo\n    function saveStorageUser( data ) {\n        localStorage.setItem('Sistema_User', JSON.stringify(data))\n    }\n\n    // Login de usuario\n    async function logar(email, password) {\n        setAuthLoading( true )\n        \n        // Indo no firebase buscar email e senha\n        await firebase.auth().signInWithEmailAndPassword( email, password )\n        .then(async ( value ) => {  // recebendo a response da promisse, pegando uid\n            let uid = value.user.uid;\n            \n            const userProflie = await firebase.firestore().collection( 'users' )\n                .doc( uid ).get()\n            \n            // utilizando valor da reposta do firebase armazenando em userProfile\n            let data = {\n                uid: uid,\n                nome: userProflie.data().nome,\n                avatarUrl: userProflie.data().avatarUrl,\n                email: value.user.email\n            }\n             // Passando para estado user atraves de setUser\n             setUser( data )\n             saveStorageUser( data )\n            setAuthLoading( false ) // cadastro finalizado\n            toast.success('Bem vindo ao sistema')\n        } )\n        .catch( ( erro ) => {\n            console.log( erro );\n            toast.error('Ops!, algo errado')\n            setAuthLoading( false )\n            \n        } )\n\n    }\n\n\n    // Deslogando do sistema\n    async function deslogarFirebase() {\n        await firebase.auth().signOut()\n        localStorage.removeItem( 'Sistema_User' )\n        setUser(null)\n    }\n\n    return (\n        <AuthContext.Provider value={{\n            logado: !!user,\n            user,\n            loading,\n            casdastrarFireBase,\n            deslogarFirebase,\n            logar,\n            loadingAuth\n        }}>                         {/* !! esta convertendo o que estiver dentro do estado user em booleano*/}\n            \n            {children}\n        </AuthContext.Provider>\n    );\n}\n\nexport default AuthProvider;"]},"metadata":{},"sourceType":"module"}